# docker-compose.yml

version: '3.8'
services:
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
    networks:
      - elastic

  auth:
    build:
      context: .
      dockerfile: ./apps/authorization/Dockerfile
    command: npm run start:dev authorization && generate:auth:docker && migrate:auth:docker && seed:auth:docker
    env_file:
      - ./apps/authorization/.envDocker
    depends_on:
      - postgres-auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4001:4001
    networks:
      - elastic

  meetup:
    build:
      context: .
      dockerfile: ./apps/meetup/Dockerfile
    command: npm run start:dev meetup && generate:meetup:docker && migrate:meetup:docker && seed:meetup:docker
    env_file:
      - ./apps/meetup/.envDocker
    depends_on:
      - postgres-meetup
      - rabbitmq
      - elasticsearch
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 4000:4000
    networks:
      - elastic

  gateway:
    build:
      context: .
      dockerfile: ./apps/api-gateway/Dockerfile
    command: npm run start:dev api-gateway
    env_file:
      - ./apps/api-gateway/.envDocker
    depends_on:
      - meetup
      - auth
      - rabbitmq
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - 3000:3000
    networks:
      - elastic

  postgres-auth:
    image: postgis/postgis:13-3.4
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=957483
      - POSTGRES_DB=auth_microservice_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - elastic

  postgres-meetup:
    image: postgis/postgis:13-3.4
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=957483
      - POSTGRES_DB=meetup_microservice_db
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5433
    expose:
      - '5433'
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - '5433:5433'
    command:
      - -p 5433
    networks:
      - elastic

  elasticsearch:
    image: elasticsearch:8.10.2
    ports:
      - 9200:9200
    environment:
      discovery.type: 'single-node'
      xpack.security.enabled: 'true'
      ELASTIC_PASSWORD: 'rxI2de2zHgnmKYkfToDh'
    networks:
      - elastic
    mem_limit: 1g
  # kibana:
  #   container_name: kb-container
  #   image: docker.elastic.co/kibana/kibana:8.9.1
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   networks:
  #     - es-net
  #   depends_on:
  #     - elasticsearch
  #   ports:
  #     - 5601:5601
  #   volumes:
  #     - kibanadata:/usr/share/kibana/data
volumes:
  postgres:


networks:
  elastic:


