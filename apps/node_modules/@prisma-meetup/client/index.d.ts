
/**
 * Client
**/

import * as runtime from './runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Meetups
 * 
 */
export type Meetups = $Result.DefaultSelection<Prisma.$MeetupsPayload>
/**
 * Model Tags
 * 
 */
export type Tags = $Result.DefaultSelection<Prisma.$TagsPayload>
/**
 * Model MeetupsToTags
 * 
 */
export type MeetupsToTags = $Result.DefaultSelection<Prisma.$MeetupsToTagsPayload>
/**
 * Model Members
 * 
 */
export type Members = $Result.DefaultSelection<Prisma.$MembersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Meetups
 * const meetups = await prisma.meetups.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Meetups
   * const meetups = await prisma.meetups.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.meetups`: Exposes CRUD operations for the **Meetups** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetups
    * const meetups = await prisma.meetups.findMany()
    * ```
    */
  get meetups(): Prisma.MeetupsDelegate<ExtArgs>;

  /**
   * `prisma.tags`: Exposes CRUD operations for the **Tags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tags.findMany()
    * ```
    */
  get tags(): Prisma.TagsDelegate<ExtArgs>;

  /**
   * `prisma.meetupsToTags`: Exposes CRUD operations for the **MeetupsToTags** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupsToTags
    * const meetupsToTags = await prisma.meetupsToTags.findMany()
    * ```
    */
  get meetupsToTags(): Prisma.MeetupsToTagsDelegate<ExtArgs>;

  /**
   * `prisma.members`: Exposes CRUD operations for the **Members** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.members.findMany()
    * ```
    */
  get members(): Prisma.MembersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.1.1
   * Query Engine version: 6a3747c37ff169c90047725a05a6ef02e32ac97e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Meetups: 'Meetups',
    Tags: 'Tags',
    MeetupsToTags: 'MeetupsToTags',
    Members: 'Members'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'meetups' | 'tags' | 'meetupsToTags' | 'members'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Meetups: {
        payload: Prisma.$MeetupsPayload<ExtArgs>
        fields: Prisma.MeetupsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          findFirst: {
            args: Prisma.MeetupsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          findMany: {
            args: Prisma.MeetupsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>[]
          }
          create: {
            args: Prisma.MeetupsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          createMany: {
            args: Prisma.MeetupsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MeetupsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          update: {
            args: Prisma.MeetupsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          deleteMany: {
            args: Prisma.MeetupsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MeetupsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsPayload>
          }
          aggregate: {
            args: Prisma.MeetupsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMeetups>
          }
          groupBy: {
            args: Prisma.MeetupsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MeetupsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupsCountArgs<ExtArgs>,
            result: $Utils.Optional<MeetupsCountAggregateOutputType> | number
          }
        }
      }
      Tags: {
        payload: Prisma.$TagsPayload<ExtArgs>
        fields: Prisma.TagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          findFirst: {
            args: Prisma.TagsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          findMany: {
            args: Prisma.TagsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>[]
          }
          create: {
            args: Prisma.TagsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          createMany: {
            args: Prisma.TagsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TagsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          update: {
            args: Prisma.TagsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          deleteMany: {
            args: Prisma.TagsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TagsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TagsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagsPayload>
          }
          aggregate: {
            args: Prisma.TagsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTags>
          }
          groupBy: {
            args: Prisma.TagsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagsCountArgs<ExtArgs>,
            result: $Utils.Optional<TagsCountAggregateOutputType> | number
          }
        }
      }
      MeetupsToTags: {
        payload: Prisma.$MeetupsToTagsPayload<ExtArgs>
        fields: Prisma.MeetupsToTagsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupsToTagsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupsToTagsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          findFirst: {
            args: Prisma.MeetupsToTagsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupsToTagsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          findMany: {
            args: Prisma.MeetupsToTagsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>[]
          }
          create: {
            args: Prisma.MeetupsToTagsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          createMany: {
            args: Prisma.MeetupsToTagsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MeetupsToTagsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          update: {
            args: Prisma.MeetupsToTagsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          deleteMany: {
            args: Prisma.MeetupsToTagsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupsToTagsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MeetupsToTagsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MeetupsToTagsPayload>
          }
          aggregate: {
            args: Prisma.MeetupsToTagsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMeetupsToTags>
          }
          groupBy: {
            args: Prisma.MeetupsToTagsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MeetupsToTagsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupsToTagsCountArgs<ExtArgs>,
            result: $Utils.Optional<MeetupsToTagsCountAggregateOutputType> | number
          }
        }
      }
      Members: {
        payload: Prisma.$MembersPayload<ExtArgs>
        fields: Prisma.MembersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MembersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MembersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          findFirst: {
            args: Prisma.MembersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MembersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          findMany: {
            args: Prisma.MembersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>[]
          }
          create: {
            args: Prisma.MembersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          createMany: {
            args: Prisma.MembersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MembersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          update: {
            args: Prisma.MembersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          deleteMany: {
            args: Prisma.MembersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MembersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MembersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MembersPayload>
          }
          aggregate: {
            args: Prisma.MembersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMembers>
          }
          groupBy: {
            args: Prisma.MembersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MembersGroupByOutputType>[]
          }
          count: {
            args: Prisma.MembersCountArgs<ExtArgs>,
            result: $Utils.Optional<MembersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type MeetupsCountOutputType
   */

  export type MeetupsCountOutputType = {
    tags: number
    members: number
  }

  export type MeetupsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tags?: boolean | MeetupsCountOutputTypeCountTagsArgs
    members?: boolean | MeetupsCountOutputTypeCountMembersArgs
  }

  // Custom InputTypes

  /**
   * MeetupsCountOutputType without action
   */
  export type MeetupsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsCountOutputType
     */
    select?: MeetupsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * MeetupsCountOutputType without action
   */
  export type MeetupsCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MeetupsToTagsWhereInput
  }


  /**
   * MeetupsCountOutputType without action
   */
  export type MeetupsCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MembersWhereInput
  }



  /**
   * Count Type TagsCountOutputType
   */

  export type TagsCountOutputType = {
    meetups: number
  }

  export type TagsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meetups?: boolean | TagsCountOutputTypeCountMeetupsArgs
  }

  // Custom InputTypes

  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagsCountOutputType
     */
    select?: TagsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TagsCountOutputType without action
   */
  export type TagsCountOutputTypeCountMeetupsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MeetupsToTagsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Meetups
   */

  export type AggregateMeetups = {
    _count: MeetupsCountAggregateOutputType | null
    _avg: MeetupsAvgAggregateOutputType | null
    _sum: MeetupsSumAggregateOutputType | null
    _min: MeetupsMinAggregateOutputType | null
    _max: MeetupsMaxAggregateOutputType | null
  }

  export type MeetupsAvgAggregateOutputType = {
    id: number | null
    organizerId: number | null
  }

  export type MeetupsSumAggregateOutputType = {
    id: number | null
    organizerId: number | null
  }

  export type MeetupsMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: string | null
    place: string | null
    organizerId: number | null
  }

  export type MeetupsMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    date: string | null
    place: string | null
    organizerId: number | null
  }

  export type MeetupsCountAggregateOutputType = {
    id: number
    title: number
    description: number
    date: number
    place: number
    organizerId: number
    _all: number
  }


  export type MeetupsAvgAggregateInputType = {
    id?: true
    organizerId?: true
  }

  export type MeetupsSumAggregateInputType = {
    id?: true
    organizerId?: true
  }

  export type MeetupsMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    place?: true
    organizerId?: true
  }

  export type MeetupsMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    place?: true
    organizerId?: true
  }

  export type MeetupsCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    date?: true
    place?: true
    organizerId?: true
    _all?: true
  }

  export type MeetupsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetups to aggregate.
     */
    where?: MeetupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupsOrderByWithRelationInput | MeetupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetups
    **/
    _count?: true | MeetupsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetupsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetupsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupsMaxAggregateInputType
  }

  export type GetMeetupsAggregateType<T extends MeetupsAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetups]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetups[P]>
      : GetScalarType<T[P], AggregateMeetups[P]>
  }




  export type MeetupsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MeetupsWhereInput
    orderBy?: MeetupsOrderByWithAggregationInput | MeetupsOrderByWithAggregationInput[]
    by: MeetupsScalarFieldEnum[] | MeetupsScalarFieldEnum
    having?: MeetupsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupsCountAggregateInputType | true
    _avg?: MeetupsAvgAggregateInputType
    _sum?: MeetupsSumAggregateInputType
    _min?: MeetupsMinAggregateInputType
    _max?: MeetupsMaxAggregateInputType
  }

  export type MeetupsGroupByOutputType = {
    id: number
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    _count: MeetupsCountAggregateOutputType | null
    _avg: MeetupsAvgAggregateOutputType | null
    _sum: MeetupsSumAggregateOutputType | null
    _min: MeetupsMinAggregateOutputType | null
    _max: MeetupsMaxAggregateOutputType | null
  }

  type GetMeetupsGroupByPayload<T extends MeetupsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupsGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupsGroupByOutputType[P]>
        }
      >
    >


  export type MeetupsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    place?: boolean
    organizerId?: boolean
    tags?: boolean | Meetups$tagsArgs<ExtArgs>
    members?: boolean | Meetups$membersArgs<ExtArgs>
    _count?: boolean | MeetupsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetups"]>

  export type MeetupsSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    place?: boolean
    organizerId?: boolean
  }

  export type MeetupsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tags?: boolean | Meetups$tagsArgs<ExtArgs>
    members?: boolean | Meetups$membersArgs<ExtArgs>
    _count?: boolean | MeetupsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MeetupsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Meetups"
    objects: {
      tags: Prisma.$MeetupsToTagsPayload<ExtArgs>[]
      members: Prisma.$MembersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
      description: string
      date: string
      place: string
      organizerId: number
    }, ExtArgs["result"]["meetups"]>
    composites: {}
  }


  type MeetupsGetPayload<S extends boolean | null | undefined | MeetupsDefaultArgs> = $Result.GetResult<Prisma.$MeetupsPayload, S>

  type MeetupsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MeetupsFindManyArgs, 'select' | 'include'> & {
      select?: MeetupsCountAggregateInputType | true
    }

  export interface MeetupsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meetups'], meta: { name: 'Meetups' } }
    /**
     * Find zero or one Meetups that matches the filter.
     * @param {MeetupsFindUniqueArgs} args - Arguments to find a Meetups
     * @example
     * // Get one Meetups
     * const meetups = await prisma.meetups.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetupsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsFindUniqueArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Meetups that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetupsFindUniqueOrThrowArgs} args - Arguments to find a Meetups
     * @example
     * // Get one Meetups
     * const meetups = await prisma.meetups.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetupsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Meetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsFindFirstArgs} args - Arguments to find a Meetups
     * @example
     * // Get one Meetups
     * const meetups = await prisma.meetups.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetupsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsFindFirstArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Meetups that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsFindFirstOrThrowArgs} args - Arguments to find a Meetups
     * @example
     * // Get one Meetups
     * const meetups = await prisma.meetups.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetupsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Meetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetups
     * const meetups = await prisma.meetups.findMany()
     * 
     * // Get first 10 Meetups
     * const meetups = await prisma.meetups.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupsWithIdOnly = await prisma.meetups.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetupsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Meetups.
     * @param {MeetupsCreateArgs} args - Arguments to create a Meetups.
     * @example
     * // Create one Meetups
     * const Meetups = await prisma.meetups.create({
     *   data: {
     *     // ... data to create a Meetups
     *   }
     * })
     * 
    **/
    create<T extends MeetupsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsCreateArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Meetups.
     *     @param {MeetupsCreateManyArgs} args - Arguments to create many Meetups.
     *     @example
     *     // Create many Meetups
     *     const meetups = await prisma.meetups.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetupsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Meetups.
     * @param {MeetupsDeleteArgs} args - Arguments to delete one Meetups.
     * @example
     * // Delete one Meetups
     * const Meetups = await prisma.meetups.delete({
     *   where: {
     *     // ... filter to delete one Meetups
     *   }
     * })
     * 
    **/
    delete<T extends MeetupsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsDeleteArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Meetups.
     * @param {MeetupsUpdateArgs} args - Arguments to update one Meetups.
     * @example
     * // Update one Meetups
     * const meetups = await prisma.meetups.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetupsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsUpdateArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Meetups.
     * @param {MeetupsDeleteManyArgs} args - Arguments to filter Meetups to delete.
     * @example
     * // Delete a few Meetups
     * const { count } = await prisma.meetups.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetupsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetups
     * const meetups = await prisma.meetups.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetupsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meetups.
     * @param {MeetupsUpsertArgs} args - Arguments to update or create a Meetups.
     * @example
     * // Update or create a Meetups
     * const meetups = await prisma.meetups.upsert({
     *   create: {
     *     // ... data to create a Meetups
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meetups we want to update
     *   }
     * })
    **/
    upsert<T extends MeetupsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsUpsertArgs<ExtArgs>>
    ): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsCountArgs} args - Arguments to filter Meetups to count.
     * @example
     * // Count the number of Meetups
     * const count = await prisma.meetups.count({
     *   where: {
     *     // ... the filter for the Meetups we want to count
     *   }
     * })
    **/
    count<T extends MeetupsCountArgs>(
      args?: Subset<T, MeetupsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupsAggregateArgs>(args: Subset<T, MeetupsAggregateArgs>): Prisma.PrismaPromise<GetMeetupsAggregateType<T>>

    /**
     * Group by Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupsGroupByArgs['orderBy'] }
        : { orderBy?: MeetupsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meetups model
   */
  readonly fields: MeetupsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meetups.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tags<T extends Meetups$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Meetups$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findMany'> | Null>;

    members<T extends Meetups$membersArgs<ExtArgs> = {}>(args?: Subset<T, Meetups$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Meetups model
   */ 
  interface MeetupsFieldRefs {
    readonly id: FieldRef<"Meetups", 'Int'>
    readonly title: FieldRef<"Meetups", 'String'>
    readonly description: FieldRef<"Meetups", 'String'>
    readonly date: FieldRef<"Meetups", 'String'>
    readonly place: FieldRef<"Meetups", 'String'>
    readonly organizerId: FieldRef<"Meetups", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Meetups findUnique
   */
  export type MeetupsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where: MeetupsWhereUniqueInput
  }


  /**
   * Meetups findUniqueOrThrow
   */
  export type MeetupsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where: MeetupsWhereUniqueInput
  }


  /**
   * Meetups findFirst
   */
  export type MeetupsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where?: MeetupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupsOrderByWithRelationInput | MeetupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetups.
     */
    cursor?: MeetupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetups.
     */
    distinct?: MeetupsScalarFieldEnum | MeetupsScalarFieldEnum[]
  }


  /**
   * Meetups findFirstOrThrow
   */
  export type MeetupsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where?: MeetupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupsOrderByWithRelationInput | MeetupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetups.
     */
    cursor?: MeetupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetups.
     */
    distinct?: MeetupsScalarFieldEnum | MeetupsScalarFieldEnum[]
  }


  /**
   * Meetups findMany
   */
  export type MeetupsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where?: MeetupsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupsOrderByWithRelationInput | MeetupsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetups.
     */
    cursor?: MeetupsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    distinct?: MeetupsScalarFieldEnum | MeetupsScalarFieldEnum[]
  }


  /**
   * Meetups create
   */
  export type MeetupsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * The data needed to create a Meetups.
     */
    data: XOR<MeetupsCreateInput, MeetupsUncheckedCreateInput>
  }


  /**
   * Meetups createMany
   */
  export type MeetupsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meetups.
     */
    data: MeetupsCreateManyInput | MeetupsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Meetups update
   */
  export type MeetupsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * The data needed to update a Meetups.
     */
    data: XOR<MeetupsUpdateInput, MeetupsUncheckedUpdateInput>
    /**
     * Choose, which Meetups to update.
     */
    where: MeetupsWhereUniqueInput
  }


  /**
   * Meetups updateMany
   */
  export type MeetupsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meetups.
     */
    data: XOR<MeetupsUpdateManyMutationInput, MeetupsUncheckedUpdateManyInput>
    /**
     * Filter which Meetups to update
     */
    where?: MeetupsWhereInput
  }


  /**
   * Meetups upsert
   */
  export type MeetupsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * The filter to search for the Meetups to update in case it exists.
     */
    where: MeetupsWhereUniqueInput
    /**
     * In case the Meetups found by the `where` argument doesn't exist, create a new Meetups with this data.
     */
    create: XOR<MeetupsCreateInput, MeetupsUncheckedCreateInput>
    /**
     * In case the Meetups was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupsUpdateInput, MeetupsUncheckedUpdateInput>
  }


  /**
   * Meetups delete
   */
  export type MeetupsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
    /**
     * Filter which Meetups to delete.
     */
    where: MeetupsWhereUniqueInput
  }


  /**
   * Meetups deleteMany
   */
  export type MeetupsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetups to delete
     */
    where?: MeetupsWhereInput
  }


  /**
   * Meetups.tags
   */
  export type Meetups$tagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    where?: MeetupsToTagsWhereInput
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    cursor?: MeetupsToTagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupsToTagsScalarFieldEnum | MeetupsToTagsScalarFieldEnum[]
  }


  /**
   * Meetups.members
   */
  export type Meetups$membersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    where?: MembersWhereInput
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    cursor?: MembersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Meetups without action
   */
  export type MeetupsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetups
     */
    select?: MeetupsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsInclude<ExtArgs> | null
  }



  /**
   * Model Tags
   */

  export type AggregateTags = {
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  export type TagsAvgAggregateOutputType = {
    id: number | null
  }

  export type TagsSumAggregateOutputType = {
    id: number | null
  }

  export type TagsMinAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type TagsMaxAggregateOutputType = {
    id: number | null
    title: string | null
  }

  export type TagsCountAggregateOutputType = {
    id: number
    title: number
    _all: number
  }


  export type TagsAvgAggregateInputType = {
    id?: true
  }

  export type TagsSumAggregateInputType = {
    id?: true
  }

  export type TagsMinAggregateInputType = {
    id?: true
    title?: true
  }

  export type TagsMaxAggregateInputType = {
    id?: true
    title?: true
  }

  export type TagsCountAggregateInputType = {
    id?: true
    title?: true
    _all?: true
  }

  export type TagsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to aggregate.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagsMaxAggregateInputType
  }

  export type GetTagsAggregateType<T extends TagsAggregateArgs> = {
        [P in keyof T & keyof AggregateTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTags[P]>
      : GetScalarType<T[P], AggregateTags[P]>
  }




  export type TagsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TagsWhereInput
    orderBy?: TagsOrderByWithAggregationInput | TagsOrderByWithAggregationInput[]
    by: TagsScalarFieldEnum[] | TagsScalarFieldEnum
    having?: TagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagsCountAggregateInputType | true
    _avg?: TagsAvgAggregateInputType
    _sum?: TagsSumAggregateInputType
    _min?: TagsMinAggregateInputType
    _max?: TagsMaxAggregateInputType
  }

  export type TagsGroupByOutputType = {
    id: number
    title: string
    _count: TagsCountAggregateOutputType | null
    _avg: TagsAvgAggregateOutputType | null
    _sum: TagsSumAggregateOutputType | null
    _min: TagsMinAggregateOutputType | null
    _max: TagsMaxAggregateOutputType | null
  }

  type GetTagsGroupByPayload<T extends TagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagsGroupByOutputType[P]>
            : GetScalarType<T[P], TagsGroupByOutputType[P]>
        }
      >
    >


  export type TagsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    meetups?: boolean | Tags$meetupsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tags"]>

  export type TagsSelectScalar = {
    id?: boolean
    title?: boolean
  }

  export type TagsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meetups?: boolean | Tags$meetupsArgs<ExtArgs>
    _count?: boolean | TagsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TagsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Tags"
    objects: {
      meetups: Prisma.$MeetupsToTagsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      title: string
    }, ExtArgs["result"]["tags"]>
    composites: {}
  }


  type TagsGetPayload<S extends boolean | null | undefined | TagsDefaultArgs> = $Result.GetResult<Prisma.$TagsPayload, S>

  type TagsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TagsFindManyArgs, 'select' | 'include'> & {
      select?: TagsCountAggregateInputType | true
    }

  export interface TagsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tags'], meta: { name: 'Tags' } }
    /**
     * Find zero or one Tags that matches the filter.
     * @param {TagsFindUniqueArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TagsFindUniqueArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagsFindUniqueOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsFindFirstArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindFirstOrThrowArgs} args - Arguments to find a Tags
     * @example
     * // Get one Tags
     * const tags = await prisma.tags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tags.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tagsWithIdOnly = await prisma.tags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TagsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tags.
     * @param {TagsCreateArgs} args - Arguments to create a Tags.
     * @example
     * // Create one Tags
     * const Tags = await prisma.tags.create({
     *   data: {
     *     // ... data to create a Tags
     *   }
     * })
     * 
    **/
    create<T extends TagsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TagsCreateArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {TagsCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tags = await prisma.tags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tags.
     * @param {TagsDeleteArgs} args - Arguments to delete one Tags.
     * @example
     * // Delete one Tags
     * const Tags = await prisma.tags.delete({
     *   where: {
     *     // ... filter to delete one Tags
     *   }
     * })
     * 
    **/
    delete<T extends TagsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TagsDeleteArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tags.
     * @param {TagsUpdateArgs} args - Arguments to update one Tags.
     * @example
     * // Update one Tags
     * const tags = await prisma.tags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TagsUpdateArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagsDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tags = await prisma.tags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TagsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tags.
     * @param {TagsUpsertArgs} args - Arguments to update or create a Tags.
     * @example
     * // Update or create a Tags
     * const tags = await prisma.tags.upsert({
     *   create: {
     *     // ... data to create a Tags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tags we want to update
     *   }
     * })
    **/
    upsert<T extends TagsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TagsUpsertArgs<ExtArgs>>
    ): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tags.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagsCountArgs>(
      args?: Subset<T, TagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagsAggregateArgs>(args: Subset<T, TagsAggregateArgs>): Prisma.PrismaPromise<GetTagsAggregateType<T>>

    /**
     * Group by Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagsGroupByArgs['orderBy'] }
        : { orderBy?: TagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tags model
   */
  readonly fields: TagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    meetups<T extends Tags$meetupsArgs<ExtArgs> = {}>(args?: Subset<T, Tags$meetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tags model
   */ 
  interface TagsFieldRefs {
    readonly id: FieldRef<"Tags", 'Int'>
    readonly title: FieldRef<"Tags", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Tags findUnique
   */
  export type TagsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags findUniqueOrThrow
   */
  export type TagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags findFirst
   */
  export type TagsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * Tags findFirstOrThrow
   */
  export type TagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * Tags findMany
   */
  export type TagsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagsOrderByWithRelationInput | TagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagsScalarFieldEnum | TagsScalarFieldEnum[]
  }


  /**
   * Tags create
   */
  export type TagsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The data needed to create a Tags.
     */
    data: XOR<TagsCreateInput, TagsUncheckedCreateInput>
  }


  /**
   * Tags createMany
   */
  export type TagsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagsCreateManyInput | TagsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Tags update
   */
  export type TagsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The data needed to update a Tags.
     */
    data: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
    /**
     * Choose, which Tags to update.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags updateMany
   */
  export type TagsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagsUpdateManyMutationInput, TagsUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagsWhereInput
  }


  /**
   * Tags upsert
   */
  export type TagsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * The filter to search for the Tags to update in case it exists.
     */
    where: TagsWhereUniqueInput
    /**
     * In case the Tags found by the `where` argument doesn't exist, create a new Tags with this data.
     */
    create: XOR<TagsCreateInput, TagsUncheckedCreateInput>
    /**
     * In case the Tags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagsUpdateInput, TagsUncheckedUpdateInput>
  }


  /**
   * Tags delete
   */
  export type TagsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
    /**
     * Filter which Tags to delete.
     */
    where: TagsWhereUniqueInput
  }


  /**
   * Tags deleteMany
   */
  export type TagsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagsWhereInput
  }


  /**
   * Tags.meetups
   */
  export type Tags$meetupsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    where?: MeetupsToTagsWhereInput
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    cursor?: MeetupsToTagsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupsToTagsScalarFieldEnum | MeetupsToTagsScalarFieldEnum[]
  }


  /**
   * Tags without action
   */
  export type TagsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tags
     */
    select?: TagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TagsInclude<ExtArgs> | null
  }



  /**
   * Model MeetupsToTags
   */

  export type AggregateMeetupsToTags = {
    _count: MeetupsToTagsCountAggregateOutputType | null
    _avg: MeetupsToTagsAvgAggregateOutputType | null
    _sum: MeetupsToTagsSumAggregateOutputType | null
    _min: MeetupsToTagsMinAggregateOutputType | null
    _max: MeetupsToTagsMaxAggregateOutputType | null
  }

  export type MeetupsToTagsAvgAggregateOutputType = {
    id: number | null
    meetupId: number | null
    tagId: number | null
  }

  export type MeetupsToTagsSumAggregateOutputType = {
    id: number | null
    meetupId: number | null
    tagId: number | null
  }

  export type MeetupsToTagsMinAggregateOutputType = {
    id: number | null
    meetupId: number | null
    tagId: number | null
  }

  export type MeetupsToTagsMaxAggregateOutputType = {
    id: number | null
    meetupId: number | null
    tagId: number | null
  }

  export type MeetupsToTagsCountAggregateOutputType = {
    id: number
    meetupId: number
    tagId: number
    _all: number
  }


  export type MeetupsToTagsAvgAggregateInputType = {
    id?: true
    meetupId?: true
    tagId?: true
  }

  export type MeetupsToTagsSumAggregateInputType = {
    id?: true
    meetupId?: true
    tagId?: true
  }

  export type MeetupsToTagsMinAggregateInputType = {
    id?: true
    meetupId?: true
    tagId?: true
  }

  export type MeetupsToTagsMaxAggregateInputType = {
    id?: true
    meetupId?: true
    tagId?: true
  }

  export type MeetupsToTagsCountAggregateInputType = {
    id?: true
    meetupId?: true
    tagId?: true
    _all?: true
  }

  export type MeetupsToTagsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupsToTags to aggregate.
     */
    where?: MeetupsToTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupsToTags to fetch.
     */
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupsToTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupsToTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupsToTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupsToTags
    **/
    _count?: true | MeetupsToTagsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetupsToTagsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetupsToTagsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupsToTagsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupsToTagsMaxAggregateInputType
  }

  export type GetMeetupsToTagsAggregateType<T extends MeetupsToTagsAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupsToTags]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupsToTags[P]>
      : GetScalarType<T[P], AggregateMeetupsToTags[P]>
  }




  export type MeetupsToTagsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MeetupsToTagsWhereInput
    orderBy?: MeetupsToTagsOrderByWithAggregationInput | MeetupsToTagsOrderByWithAggregationInput[]
    by: MeetupsToTagsScalarFieldEnum[] | MeetupsToTagsScalarFieldEnum
    having?: MeetupsToTagsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupsToTagsCountAggregateInputType | true
    _avg?: MeetupsToTagsAvgAggregateInputType
    _sum?: MeetupsToTagsSumAggregateInputType
    _min?: MeetupsToTagsMinAggregateInputType
    _max?: MeetupsToTagsMaxAggregateInputType
  }

  export type MeetupsToTagsGroupByOutputType = {
    id: number
    meetupId: number
    tagId: number
    _count: MeetupsToTagsCountAggregateOutputType | null
    _avg: MeetupsToTagsAvgAggregateOutputType | null
    _sum: MeetupsToTagsSumAggregateOutputType | null
    _min: MeetupsToTagsMinAggregateOutputType | null
    _max: MeetupsToTagsMaxAggregateOutputType | null
  }

  type GetMeetupsToTagsGroupByPayload<T extends MeetupsToTagsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupsToTagsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupsToTagsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupsToTagsGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupsToTagsGroupByOutputType[P]>
        }
      >
    >


  export type MeetupsToTagsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetupId?: boolean
    tagId?: boolean
    meetup?: boolean | MeetupsDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupsToTags"]>

  export type MeetupsToTagsSelectScalar = {
    id?: boolean
    meetupId?: boolean
    tagId?: boolean
  }

  export type MeetupsToTagsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupsDefaultArgs<ExtArgs>
    tag?: boolean | TagsDefaultArgs<ExtArgs>
  }


  export type $MeetupsToTagsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "MeetupsToTags"
    objects: {
      meetup: Prisma.$MeetupsPayload<ExtArgs>
      tag: Prisma.$TagsPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      meetupId: number
      tagId: number
    }, ExtArgs["result"]["meetupsToTags"]>
    composites: {}
  }


  type MeetupsToTagsGetPayload<S extends boolean | null | undefined | MeetupsToTagsDefaultArgs> = $Result.GetResult<Prisma.$MeetupsToTagsPayload, S>

  type MeetupsToTagsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MeetupsToTagsFindManyArgs, 'select' | 'include'> & {
      select?: MeetupsToTagsCountAggregateInputType | true
    }

  export interface MeetupsToTagsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupsToTags'], meta: { name: 'MeetupsToTags' } }
    /**
     * Find zero or one MeetupsToTags that matches the filter.
     * @param {MeetupsToTagsFindUniqueArgs} args - Arguments to find a MeetupsToTags
     * @example
     * // Get one MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MeetupsToTagsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsFindUniqueArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MeetupsToTags that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MeetupsToTagsFindUniqueOrThrowArgs} args - Arguments to find a MeetupsToTags
     * @example
     * // Get one MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MeetupsToTagsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MeetupsToTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsFindFirstArgs} args - Arguments to find a MeetupsToTags
     * @example
     * // Get one MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MeetupsToTagsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsFindFirstArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MeetupsToTags that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsFindFirstOrThrowArgs} args - Arguments to find a MeetupsToTags
     * @example
     * // Get one MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MeetupsToTagsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MeetupsToTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findMany()
     * 
     * // Get first 10 MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupsToTagsWithIdOnly = await prisma.meetupsToTags.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MeetupsToTagsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MeetupsToTags.
     * @param {MeetupsToTagsCreateArgs} args - Arguments to create a MeetupsToTags.
     * @example
     * // Create one MeetupsToTags
     * const MeetupsToTags = await prisma.meetupsToTags.create({
     *   data: {
     *     // ... data to create a MeetupsToTags
     *   }
     * })
     * 
    **/
    create<T extends MeetupsToTagsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsCreateArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MeetupsToTags.
     *     @param {MeetupsToTagsCreateManyArgs} args - Arguments to create many MeetupsToTags.
     *     @example
     *     // Create many MeetupsToTags
     *     const meetupsToTags = await prisma.meetupsToTags.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MeetupsToTagsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupsToTags.
     * @param {MeetupsToTagsDeleteArgs} args - Arguments to delete one MeetupsToTags.
     * @example
     * // Delete one MeetupsToTags
     * const MeetupsToTags = await prisma.meetupsToTags.delete({
     *   where: {
     *     // ... filter to delete one MeetupsToTags
     *   }
     * })
     * 
    **/
    delete<T extends MeetupsToTagsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsDeleteArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MeetupsToTags.
     * @param {MeetupsToTagsUpdateArgs} args - Arguments to update one MeetupsToTags.
     * @example
     * // Update one MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MeetupsToTagsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsUpdateArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MeetupsToTags.
     * @param {MeetupsToTagsDeleteManyArgs} args - Arguments to filter MeetupsToTags to delete.
     * @example
     * // Delete a few MeetupsToTags
     * const { count } = await prisma.meetupsToTags.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MeetupsToTagsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MeetupsToTagsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupsToTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MeetupsToTagsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupsToTags.
     * @param {MeetupsToTagsUpsertArgs} args - Arguments to update or create a MeetupsToTags.
     * @example
     * // Update or create a MeetupsToTags
     * const meetupsToTags = await prisma.meetupsToTags.upsert({
     *   create: {
     *     // ... data to create a MeetupsToTags
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupsToTags we want to update
     *   }
     * })
    **/
    upsert<T extends MeetupsToTagsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MeetupsToTagsUpsertArgs<ExtArgs>>
    ): Prisma__MeetupsToTagsClient<$Result.GetResult<Prisma.$MeetupsToTagsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MeetupsToTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsCountArgs} args - Arguments to filter MeetupsToTags to count.
     * @example
     * // Count the number of MeetupsToTags
     * const count = await prisma.meetupsToTags.count({
     *   where: {
     *     // ... the filter for the MeetupsToTags we want to count
     *   }
     * })
    **/
    count<T extends MeetupsToTagsCountArgs>(
      args?: Subset<T, MeetupsToTagsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupsToTagsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupsToTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupsToTagsAggregateArgs>(args: Subset<T, MeetupsToTagsAggregateArgs>): Prisma.PrismaPromise<GetMeetupsToTagsAggregateType<T>>

    /**
     * Group by MeetupsToTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupsToTagsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupsToTagsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupsToTagsGroupByArgs['orderBy'] }
        : { orderBy?: MeetupsToTagsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupsToTagsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupsToTagsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupsToTags model
   */
  readonly fields: MeetupsToTagsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupsToTags.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupsToTagsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    meetup<T extends MeetupsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupsDefaultArgs<ExtArgs>>): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    tag<T extends TagsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagsDefaultArgs<ExtArgs>>): Prisma__TagsClient<$Result.GetResult<Prisma.$TagsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MeetupsToTags model
   */ 
  interface MeetupsToTagsFieldRefs {
    readonly id: FieldRef<"MeetupsToTags", 'Int'>
    readonly meetupId: FieldRef<"MeetupsToTags", 'Int'>
    readonly tagId: FieldRef<"MeetupsToTags", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * MeetupsToTags findUnique
   */
  export type MeetupsToTagsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter, which MeetupsToTags to fetch.
     */
    where: MeetupsToTagsWhereUniqueInput
  }


  /**
   * MeetupsToTags findUniqueOrThrow
   */
  export type MeetupsToTagsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter, which MeetupsToTags to fetch.
     */
    where: MeetupsToTagsWhereUniqueInput
  }


  /**
   * MeetupsToTags findFirst
   */
  export type MeetupsToTagsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter, which MeetupsToTags to fetch.
     */
    where?: MeetupsToTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupsToTags to fetch.
     */
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupsToTags.
     */
    cursor?: MeetupsToTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupsToTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupsToTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupsToTags.
     */
    distinct?: MeetupsToTagsScalarFieldEnum | MeetupsToTagsScalarFieldEnum[]
  }


  /**
   * MeetupsToTags findFirstOrThrow
   */
  export type MeetupsToTagsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter, which MeetupsToTags to fetch.
     */
    where?: MeetupsToTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupsToTags to fetch.
     */
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupsToTags.
     */
    cursor?: MeetupsToTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupsToTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupsToTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupsToTags.
     */
    distinct?: MeetupsToTagsScalarFieldEnum | MeetupsToTagsScalarFieldEnum[]
  }


  /**
   * MeetupsToTags findMany
   */
  export type MeetupsToTagsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter, which MeetupsToTags to fetch.
     */
    where?: MeetupsToTagsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupsToTags to fetch.
     */
    orderBy?: MeetupsToTagsOrderByWithRelationInput | MeetupsToTagsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupsToTags.
     */
    cursor?: MeetupsToTagsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupsToTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupsToTags.
     */
    skip?: number
    distinct?: MeetupsToTagsScalarFieldEnum | MeetupsToTagsScalarFieldEnum[]
  }


  /**
   * MeetupsToTags create
   */
  export type MeetupsToTagsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupsToTags.
     */
    data: XOR<MeetupsToTagsCreateInput, MeetupsToTagsUncheckedCreateInput>
  }


  /**
   * MeetupsToTags createMany
   */
  export type MeetupsToTagsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupsToTags.
     */
    data: MeetupsToTagsCreateManyInput | MeetupsToTagsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * MeetupsToTags update
   */
  export type MeetupsToTagsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupsToTags.
     */
    data: XOR<MeetupsToTagsUpdateInput, MeetupsToTagsUncheckedUpdateInput>
    /**
     * Choose, which MeetupsToTags to update.
     */
    where: MeetupsToTagsWhereUniqueInput
  }


  /**
   * MeetupsToTags updateMany
   */
  export type MeetupsToTagsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupsToTags.
     */
    data: XOR<MeetupsToTagsUpdateManyMutationInput, MeetupsToTagsUncheckedUpdateManyInput>
    /**
     * Filter which MeetupsToTags to update
     */
    where?: MeetupsToTagsWhereInput
  }


  /**
   * MeetupsToTags upsert
   */
  export type MeetupsToTagsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupsToTags to update in case it exists.
     */
    where: MeetupsToTagsWhereUniqueInput
    /**
     * In case the MeetupsToTags found by the `where` argument doesn't exist, create a new MeetupsToTags with this data.
     */
    create: XOR<MeetupsToTagsCreateInput, MeetupsToTagsUncheckedCreateInput>
    /**
     * In case the MeetupsToTags was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupsToTagsUpdateInput, MeetupsToTagsUncheckedUpdateInput>
  }


  /**
   * MeetupsToTags delete
   */
  export type MeetupsToTagsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
    /**
     * Filter which MeetupsToTags to delete.
     */
    where: MeetupsToTagsWhereUniqueInput
  }


  /**
   * MeetupsToTags deleteMany
   */
  export type MeetupsToTagsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupsToTags to delete
     */
    where?: MeetupsToTagsWhereInput
  }


  /**
   * MeetupsToTags without action
   */
  export type MeetupsToTagsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupsToTags
     */
    select?: MeetupsToTagsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MeetupsToTagsInclude<ExtArgs> | null
  }



  /**
   * Model Members
   */

  export type AggregateMembers = {
    _count: MembersCountAggregateOutputType | null
    _avg: MembersAvgAggregateOutputType | null
    _sum: MembersSumAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  export type MembersAvgAggregateOutputType = {
    id: number | null
    meetupId: number | null
    userId: number | null
  }

  export type MembersSumAggregateOutputType = {
    id: number | null
    meetupId: number | null
    userId: number | null
  }

  export type MembersMinAggregateOutputType = {
    id: number | null
    meetupId: number | null
    userId: number | null
  }

  export type MembersMaxAggregateOutputType = {
    id: number | null
    meetupId: number | null
    userId: number | null
  }

  export type MembersCountAggregateOutputType = {
    id: number
    meetupId: number
    userId: number
    _all: number
  }


  export type MembersAvgAggregateInputType = {
    id?: true
    meetupId?: true
    userId?: true
  }

  export type MembersSumAggregateInputType = {
    id?: true
    meetupId?: true
    userId?: true
  }

  export type MembersMinAggregateInputType = {
    id?: true
    meetupId?: true
    userId?: true
  }

  export type MembersMaxAggregateInputType = {
    id?: true
    meetupId?: true
    userId?: true
  }

  export type MembersCountAggregateInputType = {
    id?: true
    meetupId?: true
    userId?: true
    _all?: true
  }

  export type MembersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to aggregate.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MembersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MembersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MembersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MembersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MembersMaxAggregateInputType
  }

  export type GetMembersAggregateType<T extends MembersAggregateArgs> = {
        [P in keyof T & keyof AggregateMembers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMembers[P]>
      : GetScalarType<T[P], AggregateMembers[P]>
  }




  export type MembersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MembersWhereInput
    orderBy?: MembersOrderByWithAggregationInput | MembersOrderByWithAggregationInput[]
    by: MembersScalarFieldEnum[] | MembersScalarFieldEnum
    having?: MembersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MembersCountAggregateInputType | true
    _avg?: MembersAvgAggregateInputType
    _sum?: MembersSumAggregateInputType
    _min?: MembersMinAggregateInputType
    _max?: MembersMaxAggregateInputType
  }

  export type MembersGroupByOutputType = {
    id: number
    meetupId: number
    userId: number
    _count: MembersCountAggregateOutputType | null
    _avg: MembersAvgAggregateOutputType | null
    _sum: MembersSumAggregateOutputType | null
    _min: MembersMinAggregateOutputType | null
    _max: MembersMaxAggregateOutputType | null
  }

  type GetMembersGroupByPayload<T extends MembersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MembersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MembersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MembersGroupByOutputType[P]>
            : GetScalarType<T[P], MembersGroupByOutputType[P]>
        }
      >
    >


  export type MembersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetupId?: boolean
    userId?: boolean
    meetup?: boolean | MeetupsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["members"]>

  export type MembersSelectScalar = {
    id?: boolean
    meetupId?: boolean
    userId?: boolean
  }

  export type MembersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupsDefaultArgs<ExtArgs>
  }


  export type $MembersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Members"
    objects: {
      meetup: Prisma.$MeetupsPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: number
      meetupId: number
      userId: number
    }, ExtArgs["result"]["members"]>
    composites: {}
  }


  type MembersGetPayload<S extends boolean | null | undefined | MembersDefaultArgs> = $Result.GetResult<Prisma.$MembersPayload, S>

  type MembersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MembersFindManyArgs, 'select' | 'include'> & {
      select?: MembersCountAggregateInputType | true
    }

  export interface MembersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Members'], meta: { name: 'Members' } }
    /**
     * Find zero or one Members that matches the filter.
     * @param {MembersFindUniqueArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MembersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MembersFindUniqueArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Members that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MembersFindUniqueOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MembersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MembersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindFirstArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Members that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindFirstOrThrowArgs} args - Arguments to find a Members
     * @example
     * // Get one Members
     * const members = await prisma.members.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MembersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.members.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.members.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const membersWithIdOnly = await prisma.members.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MembersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Members.
     * @param {MembersCreateArgs} args - Arguments to create a Members.
     * @example
     * // Create one Members
     * const Members = await prisma.members.create({
     *   data: {
     *     // ... data to create a Members
     *   }
     * })
     * 
    **/
    create<T extends MembersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MembersCreateArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Members.
     *     @param {MembersCreateManyArgs} args - Arguments to create many Members.
     *     @example
     *     // Create many Members
     *     const members = await prisma.members.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MembersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Members.
     * @param {MembersDeleteArgs} args - Arguments to delete one Members.
     * @example
     * // Delete one Members
     * const Members = await prisma.members.delete({
     *   where: {
     *     // ... filter to delete one Members
     *   }
     * })
     * 
    **/
    delete<T extends MembersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MembersDeleteArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Members.
     * @param {MembersUpdateArgs} args - Arguments to update one Members.
     * @example
     * // Update one Members
     * const members = await prisma.members.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MembersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpdateArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Members.
     * @param {MembersDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.members.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MembersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MembersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const members = await prisma.members.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MembersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Members.
     * @param {MembersUpsertArgs} args - Arguments to update or create a Members.
     * @example
     * // Update or create a Members
     * const members = await prisma.members.upsert({
     *   create: {
     *     // ... data to create a Members
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Members we want to update
     *   }
     * })
    **/
    upsert<T extends MembersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MembersUpsertArgs<ExtArgs>>
    ): Prisma__MembersClient<$Result.GetResult<Prisma.$MembersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.members.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MembersCountArgs>(
      args?: Subset<T, MembersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MembersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MembersAggregateArgs>(args: Subset<T, MembersAggregateArgs>): Prisma.PrismaPromise<GetMembersAggregateType<T>>

    /**
     * Group by Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MembersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MembersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MembersGroupByArgs['orderBy'] }
        : { orderBy?: MembersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MembersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMembersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Members model
   */
  readonly fields: MembersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Members.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MembersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    meetup<T extends MeetupsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupsDefaultArgs<ExtArgs>>): Prisma__MeetupsClient<$Result.GetResult<Prisma.$MeetupsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Members model
   */ 
  interface MembersFieldRefs {
    readonly id: FieldRef<"Members", 'Int'>
    readonly meetupId: FieldRef<"Members", 'Int'>
    readonly userId: FieldRef<"Members", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Members findUnique
   */
  export type MembersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members findUniqueOrThrow
   */
  export type MembersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members findFirst
   */
  export type MembersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members findFirstOrThrow
   */
  export type MembersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members findMany
   */
  export type MembersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MembersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MembersOrderByWithRelationInput | MembersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MembersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MembersScalarFieldEnum | MembersScalarFieldEnum[]
  }


  /**
   * Members create
   */
  export type MembersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The data needed to create a Members.
     */
    data: XOR<MembersCreateInput, MembersUncheckedCreateInput>
  }


  /**
   * Members createMany
   */
  export type MembersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MembersCreateManyInput | MembersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Members update
   */
  export type MembersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The data needed to update a Members.
     */
    data: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
    /**
     * Choose, which Members to update.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members updateMany
   */
  export type MembersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MembersUpdateManyMutationInput, MembersUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MembersWhereInput
  }


  /**
   * Members upsert
   */
  export type MembersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * The filter to search for the Members to update in case it exists.
     */
    where: MembersWhereUniqueInput
    /**
     * In case the Members found by the `where` argument doesn't exist, create a new Members with this data.
     */
    create: XOR<MembersCreateInput, MembersUncheckedCreateInput>
    /**
     * In case the Members was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MembersUpdateInput, MembersUncheckedUpdateInput>
  }


  /**
   * Members delete
   */
  export type MembersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
    /**
     * Filter which Members to delete.
     */
    where: MembersWhereUniqueInput
  }


  /**
   * Members deleteMany
   */
  export type MembersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MembersWhereInput
  }


  /**
   * Members without action
   */
  export type MembersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Members
     */
    select?: MembersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MembersInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MeetupsScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    date: 'date',
    place: 'place',
    organizerId: 'organizerId'
  };

  export type MeetupsScalarFieldEnum = (typeof MeetupsScalarFieldEnum)[keyof typeof MeetupsScalarFieldEnum]


  export const TagsScalarFieldEnum: {
    id: 'id',
    title: 'title'
  };

  export type TagsScalarFieldEnum = (typeof TagsScalarFieldEnum)[keyof typeof TagsScalarFieldEnum]


  export const MeetupsToTagsScalarFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    tagId: 'tagId'
  };

  export type MeetupsToTagsScalarFieldEnum = (typeof MeetupsToTagsScalarFieldEnum)[keyof typeof MeetupsToTagsScalarFieldEnum]


  export const MembersScalarFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    userId: 'userId'
  };

  export type MembersScalarFieldEnum = (typeof MembersScalarFieldEnum)[keyof typeof MembersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type MeetupsWhereInput = {
    AND?: MeetupsWhereInput | MeetupsWhereInput[]
    OR?: MeetupsWhereInput[]
    NOT?: MeetupsWhereInput | MeetupsWhereInput[]
    id?: IntFilter<"Meetups"> | number
    title?: StringFilter<"Meetups"> | string
    description?: StringFilter<"Meetups"> | string
    date?: StringFilter<"Meetups"> | string
    place?: StringFilter<"Meetups"> | string
    organizerId?: IntFilter<"Meetups"> | number
    tags?: MeetupsToTagsListRelationFilter
    members?: MembersListRelationFilter
  }

  export type MeetupsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    place?: SortOrder
    organizerId?: SortOrder
    tags?: MeetupsToTagsOrderByRelationAggregateInput
    members?: MembersOrderByRelationAggregateInput
  }

  export type MeetupsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeetupsWhereInput | MeetupsWhereInput[]
    OR?: MeetupsWhereInput[]
    NOT?: MeetupsWhereInput | MeetupsWhereInput[]
    title?: StringFilter<"Meetups"> | string
    description?: StringFilter<"Meetups"> | string
    date?: StringFilter<"Meetups"> | string
    place?: StringFilter<"Meetups"> | string
    organizerId?: IntFilter<"Meetups"> | number
    tags?: MeetupsToTagsListRelationFilter
    members?: MembersListRelationFilter
  }, "id" | "id">

  export type MeetupsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    place?: SortOrder
    organizerId?: SortOrder
    _count?: MeetupsCountOrderByAggregateInput
    _avg?: MeetupsAvgOrderByAggregateInput
    _max?: MeetupsMaxOrderByAggregateInput
    _min?: MeetupsMinOrderByAggregateInput
    _sum?: MeetupsSumOrderByAggregateInput
  }

  export type MeetupsScalarWhereWithAggregatesInput = {
    AND?: MeetupsScalarWhereWithAggregatesInput | MeetupsScalarWhereWithAggregatesInput[]
    OR?: MeetupsScalarWhereWithAggregatesInput[]
    NOT?: MeetupsScalarWhereWithAggregatesInput | MeetupsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Meetups"> | number
    title?: StringWithAggregatesFilter<"Meetups"> | string
    description?: StringWithAggregatesFilter<"Meetups"> | string
    date?: StringWithAggregatesFilter<"Meetups"> | string
    place?: StringWithAggregatesFilter<"Meetups"> | string
    organizerId?: IntWithAggregatesFilter<"Meetups"> | number
  }

  export type TagsWhereInput = {
    AND?: TagsWhereInput | TagsWhereInput[]
    OR?: TagsWhereInput[]
    NOT?: TagsWhereInput | TagsWhereInput[]
    id?: IntFilter<"Tags"> | number
    title?: StringFilter<"Tags"> | string
    meetups?: MeetupsToTagsListRelationFilter
  }

  export type TagsOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    meetups?: MeetupsToTagsOrderByRelationAggregateInput
  }

  export type TagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    title?: string
    AND?: TagsWhereInput | TagsWhereInput[]
    OR?: TagsWhereInput[]
    NOT?: TagsWhereInput | TagsWhereInput[]
    meetups?: MeetupsToTagsListRelationFilter
  }, "id" | "id" | "title">

  export type TagsOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    _count?: TagsCountOrderByAggregateInput
    _avg?: TagsAvgOrderByAggregateInput
    _max?: TagsMaxOrderByAggregateInput
    _min?: TagsMinOrderByAggregateInput
    _sum?: TagsSumOrderByAggregateInput
  }

  export type TagsScalarWhereWithAggregatesInput = {
    AND?: TagsScalarWhereWithAggregatesInput | TagsScalarWhereWithAggregatesInput[]
    OR?: TagsScalarWhereWithAggregatesInput[]
    NOT?: TagsScalarWhereWithAggregatesInput | TagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tags"> | number
    title?: StringWithAggregatesFilter<"Tags"> | string
  }

  export type MeetupsToTagsWhereInput = {
    AND?: MeetupsToTagsWhereInput | MeetupsToTagsWhereInput[]
    OR?: MeetupsToTagsWhereInput[]
    NOT?: MeetupsToTagsWhereInput | MeetupsToTagsWhereInput[]
    id?: IntFilter<"MeetupsToTags"> | number
    meetupId?: IntFilter<"MeetupsToTags"> | number
    tagId?: IntFilter<"MeetupsToTags"> | number
    meetup?: XOR<MeetupsRelationFilter, MeetupsWhereInput>
    tag?: XOR<TagsRelationFilter, TagsWhereInput>
  }

  export type MeetupsToTagsOrderByWithRelationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
    meetup?: MeetupsOrderByWithRelationInput
    tag?: TagsOrderByWithRelationInput
  }

  export type MeetupsToTagsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeetupsToTagsWhereInput | MeetupsToTagsWhereInput[]
    OR?: MeetupsToTagsWhereInput[]
    NOT?: MeetupsToTagsWhereInput | MeetupsToTagsWhereInput[]
    meetupId?: IntFilter<"MeetupsToTags"> | number
    tagId?: IntFilter<"MeetupsToTags"> | number
    meetup?: XOR<MeetupsRelationFilter, MeetupsWhereInput>
    tag?: XOR<TagsRelationFilter, TagsWhereInput>
  }, "id" | "id">

  export type MeetupsToTagsOrderByWithAggregationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
    _count?: MeetupsToTagsCountOrderByAggregateInput
    _avg?: MeetupsToTagsAvgOrderByAggregateInput
    _max?: MeetupsToTagsMaxOrderByAggregateInput
    _min?: MeetupsToTagsMinOrderByAggregateInput
    _sum?: MeetupsToTagsSumOrderByAggregateInput
  }

  export type MeetupsToTagsScalarWhereWithAggregatesInput = {
    AND?: MeetupsToTagsScalarWhereWithAggregatesInput | MeetupsToTagsScalarWhereWithAggregatesInput[]
    OR?: MeetupsToTagsScalarWhereWithAggregatesInput[]
    NOT?: MeetupsToTagsScalarWhereWithAggregatesInput | MeetupsToTagsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MeetupsToTags"> | number
    meetupId?: IntWithAggregatesFilter<"MeetupsToTags"> | number
    tagId?: IntWithAggregatesFilter<"MeetupsToTags"> | number
  }

  export type MembersWhereInput = {
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    id?: IntFilter<"Members"> | number
    meetupId?: IntFilter<"Members"> | number
    userId?: IntFilter<"Members"> | number
    meetup?: XOR<MeetupsRelationFilter, MeetupsWhereInput>
  }

  export type MembersOrderByWithRelationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
    meetup?: MeetupsOrderByWithRelationInput
  }

  export type MembersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MembersWhereInput | MembersWhereInput[]
    OR?: MembersWhereInput[]
    NOT?: MembersWhereInput | MembersWhereInput[]
    meetupId?: IntFilter<"Members"> | number
    userId?: IntFilter<"Members"> | number
    meetup?: XOR<MeetupsRelationFilter, MeetupsWhereInput>
  }, "id" | "id">

  export type MembersOrderByWithAggregationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
    _count?: MembersCountOrderByAggregateInput
    _avg?: MembersAvgOrderByAggregateInput
    _max?: MembersMaxOrderByAggregateInput
    _min?: MembersMinOrderByAggregateInput
    _sum?: MembersSumOrderByAggregateInput
  }

  export type MembersScalarWhereWithAggregatesInput = {
    AND?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    OR?: MembersScalarWhereWithAggregatesInput[]
    NOT?: MembersScalarWhereWithAggregatesInput | MembersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Members"> | number
    meetupId?: IntWithAggregatesFilter<"Members"> | number
    userId?: IntWithAggregatesFilter<"Members"> | number
  }

  export type MeetupsCreateInput = {
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    tags?: MeetupsToTagsCreateNestedManyWithoutMeetupInput
    members?: MembersCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    tags?: MeetupsToTagsUncheckedCreateNestedManyWithoutMeetupInput
    members?: MembersUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    tags?: MeetupsToTagsUpdateManyWithoutMeetupNestedInput
    members?: MembersUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    tags?: MeetupsToTagsUncheckedUpdateManyWithoutMeetupNestedInput
    members?: MembersUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupsCreateManyInput = {
    id?: number
    title: string
    description: string
    date: string
    place: string
    organizerId: number
  }

  export type MeetupsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
  }

  export type MeetupsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
  }

  export type TagsCreateInput = {
    title: string
    meetups?: MeetupsToTagsCreateNestedManyWithoutTagInput
  }

  export type TagsUncheckedCreateInput = {
    id?: number
    title: string
    meetups?: MeetupsToTagsUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagsUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    meetups?: MeetupsToTagsUpdateManyWithoutTagNestedInput
  }

  export type TagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    meetups?: MeetupsToTagsUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagsCreateManyInput = {
    id?: number
    title: string
  }

  export type TagsUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupsToTagsCreateInput = {
    meetup: MeetupsCreateNestedOneWithoutTagsInput
    tag: TagsCreateNestedOneWithoutMeetupsInput
  }

  export type MeetupsToTagsUncheckedCreateInput = {
    id?: number
    meetupId: number
    tagId: number
  }

  export type MeetupsToTagsUpdateInput = {
    meetup?: MeetupsUpdateOneRequiredWithoutTagsNestedInput
    tag?: TagsUpdateOneRequiredWithoutMeetupsNestedInput
  }

  export type MeetupsToTagsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type MeetupsToTagsCreateManyInput = {
    id?: number
    meetupId: number
    tagId: number
  }

  export type MeetupsToTagsUpdateManyMutationInput = {

  }

  export type MeetupsToTagsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersCreateInput = {
    userId: number
    meetup: MeetupsCreateNestedOneWithoutMembersInput
  }

  export type MembersUncheckedCreateInput = {
    id?: number
    meetupId: number
    userId: number
  }

  export type MembersUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    meetup?: MeetupsUpdateOneRequiredWithoutMembersNestedInput
  }

  export type MembersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersCreateManyInput = {
    id?: number
    meetupId: number
    userId: number
  }

  export type MembersUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type MeetupsToTagsListRelationFilter = {
    every?: MeetupsToTagsWhereInput
    some?: MeetupsToTagsWhereInput
    none?: MeetupsToTagsWhereInput
  }

  export type MembersListRelationFilter = {
    every?: MembersWhereInput
    some?: MembersWhereInput
    none?: MembersWhereInput
  }

  export type MeetupsToTagsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MembersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    place?: SortOrder
    organizerId?: SortOrder
  }

  export type MeetupsAvgOrderByAggregateInput = {
    id?: SortOrder
    organizerId?: SortOrder
  }

  export type MeetupsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    place?: SortOrder
    organizerId?: SortOrder
  }

  export type MeetupsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    place?: SortOrder
    organizerId?: SortOrder
  }

  export type MeetupsSumOrderByAggregateInput = {
    id?: SortOrder
    organizerId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type TagsCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type TagsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TagsMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type TagsMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
  }

  export type TagsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MeetupsRelationFilter = {
    is?: MeetupsWhereInput
    isNot?: MeetupsWhereInput
  }

  export type TagsRelationFilter = {
    is?: TagsWhereInput
    isNot?: TagsWhereInput
  }

  export type MeetupsToTagsCountOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
  }

  export type MeetupsToTagsAvgOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
  }

  export type MeetupsToTagsMaxOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
  }

  export type MeetupsToTagsMinOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
  }

  export type MeetupsToTagsSumOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    tagId?: SortOrder
  }

  export type MembersCountOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
  }

  export type MembersAvgOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
  }

  export type MembersMaxOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
  }

  export type MembersMinOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
  }

  export type MembersSumOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    userId?: SortOrder
  }

  export type MeetupsToTagsCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput> | MeetupsToTagsCreateWithoutMeetupInput[] | MeetupsToTagsUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutMeetupInput | MeetupsToTagsCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupsToTagsCreateManyMeetupInputEnvelope
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
  }

  export type MembersCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput> | MembersCreateWithoutMeetupInput[] | MembersUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MembersCreateOrConnectWithoutMeetupInput | MembersCreateOrConnectWithoutMeetupInput[]
    createMany?: MembersCreateManyMeetupInputEnvelope
    connect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
  }

  export type MeetupsToTagsUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput> | MeetupsToTagsCreateWithoutMeetupInput[] | MeetupsToTagsUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutMeetupInput | MeetupsToTagsCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupsToTagsCreateManyMeetupInputEnvelope
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
  }

  export type MembersUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput> | MembersCreateWithoutMeetupInput[] | MembersUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MembersCreateOrConnectWithoutMeetupInput | MembersCreateOrConnectWithoutMeetupInput[]
    createMany?: MembersCreateManyMeetupInputEnvelope
    connect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MeetupsToTagsUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput> | MeetupsToTagsCreateWithoutMeetupInput[] | MeetupsToTagsUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutMeetupInput | MeetupsToTagsCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupsToTagsUpsertWithWhereUniqueWithoutMeetupInput | MeetupsToTagsUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupsToTagsCreateManyMeetupInputEnvelope
    set?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    disconnect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    delete?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    update?: MeetupsToTagsUpdateWithWhereUniqueWithoutMeetupInput | MeetupsToTagsUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupsToTagsUpdateManyWithWhereWithoutMeetupInput | MeetupsToTagsUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
  }

  export type MembersUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput> | MembersCreateWithoutMeetupInput[] | MembersUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MembersCreateOrConnectWithoutMeetupInput | MembersCreateOrConnectWithoutMeetupInput[]
    upsert?: MembersUpsertWithWhereUniqueWithoutMeetupInput | MembersUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MembersCreateManyMeetupInputEnvelope
    set?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    disconnect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    delete?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    connect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    update?: MembersUpdateWithWhereUniqueWithoutMeetupInput | MembersUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MembersUpdateManyWithWhereWithoutMeetupInput | MembersUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MembersScalarWhereInput | MembersScalarWhereInput[]
  }

  export type MeetupsToTagsUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput> | MeetupsToTagsCreateWithoutMeetupInput[] | MeetupsToTagsUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutMeetupInput | MeetupsToTagsCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupsToTagsUpsertWithWhereUniqueWithoutMeetupInput | MeetupsToTagsUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupsToTagsCreateManyMeetupInputEnvelope
    set?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    disconnect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    delete?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    update?: MeetupsToTagsUpdateWithWhereUniqueWithoutMeetupInput | MeetupsToTagsUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupsToTagsUpdateManyWithWhereWithoutMeetupInput | MeetupsToTagsUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
  }

  export type MembersUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput> | MembersCreateWithoutMeetupInput[] | MembersUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MembersCreateOrConnectWithoutMeetupInput | MembersCreateOrConnectWithoutMeetupInput[]
    upsert?: MembersUpsertWithWhereUniqueWithoutMeetupInput | MembersUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MembersCreateManyMeetupInputEnvelope
    set?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    disconnect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    delete?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    connect?: MembersWhereUniqueInput | MembersWhereUniqueInput[]
    update?: MembersUpdateWithWhereUniqueWithoutMeetupInput | MembersUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MembersUpdateManyWithWhereWithoutMeetupInput | MembersUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MembersScalarWhereInput | MembersScalarWhereInput[]
  }

  export type MeetupsToTagsCreateNestedManyWithoutTagInput = {
    create?: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput> | MeetupsToTagsCreateWithoutTagInput[] | MeetupsToTagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutTagInput | MeetupsToTagsCreateOrConnectWithoutTagInput[]
    createMany?: MeetupsToTagsCreateManyTagInputEnvelope
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
  }

  export type MeetupsToTagsUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput> | MeetupsToTagsCreateWithoutTagInput[] | MeetupsToTagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutTagInput | MeetupsToTagsCreateOrConnectWithoutTagInput[]
    createMany?: MeetupsToTagsCreateManyTagInputEnvelope
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
  }

  export type MeetupsToTagsUpdateManyWithoutTagNestedInput = {
    create?: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput> | MeetupsToTagsCreateWithoutTagInput[] | MeetupsToTagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutTagInput | MeetupsToTagsCreateOrConnectWithoutTagInput[]
    upsert?: MeetupsToTagsUpsertWithWhereUniqueWithoutTagInput | MeetupsToTagsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MeetupsToTagsCreateManyTagInputEnvelope
    set?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    disconnect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    delete?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    update?: MeetupsToTagsUpdateWithWhereUniqueWithoutTagInput | MeetupsToTagsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MeetupsToTagsUpdateManyWithWhereWithoutTagInput | MeetupsToTagsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
  }

  export type MeetupsToTagsUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput> | MeetupsToTagsCreateWithoutTagInput[] | MeetupsToTagsUncheckedCreateWithoutTagInput[]
    connectOrCreate?: MeetupsToTagsCreateOrConnectWithoutTagInput | MeetupsToTagsCreateOrConnectWithoutTagInput[]
    upsert?: MeetupsToTagsUpsertWithWhereUniqueWithoutTagInput | MeetupsToTagsUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: MeetupsToTagsCreateManyTagInputEnvelope
    set?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    disconnect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    delete?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    connect?: MeetupsToTagsWhereUniqueInput | MeetupsToTagsWhereUniqueInput[]
    update?: MeetupsToTagsUpdateWithWhereUniqueWithoutTagInput | MeetupsToTagsUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: MeetupsToTagsUpdateManyWithWhereWithoutTagInput | MeetupsToTagsUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
  }

  export type MeetupsCreateNestedOneWithoutTagsInput = {
    create?: XOR<MeetupsCreateWithoutTagsInput, MeetupsUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MeetupsCreateOrConnectWithoutTagsInput
    connect?: MeetupsWhereUniqueInput
  }

  export type TagsCreateNestedOneWithoutMeetupsInput = {
    create?: XOR<TagsCreateWithoutMeetupsInput, TagsUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutMeetupsInput
    connect?: TagsWhereUniqueInput
  }

  export type MeetupsUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<MeetupsCreateWithoutTagsInput, MeetupsUncheckedCreateWithoutTagsInput>
    connectOrCreate?: MeetupsCreateOrConnectWithoutTagsInput
    upsert?: MeetupsUpsertWithoutTagsInput
    connect?: MeetupsWhereUniqueInput
    update?: XOR<XOR<MeetupsUpdateToOneWithWhereWithoutTagsInput, MeetupsUpdateWithoutTagsInput>, MeetupsUncheckedUpdateWithoutTagsInput>
  }

  export type TagsUpdateOneRequiredWithoutMeetupsNestedInput = {
    create?: XOR<TagsCreateWithoutMeetupsInput, TagsUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: TagsCreateOrConnectWithoutMeetupsInput
    upsert?: TagsUpsertWithoutMeetupsInput
    connect?: TagsWhereUniqueInput
    update?: XOR<XOR<TagsUpdateToOneWithWhereWithoutMeetupsInput, TagsUpdateWithoutMeetupsInput>, TagsUncheckedUpdateWithoutMeetupsInput>
  }

  export type MeetupsCreateNestedOneWithoutMembersInput = {
    create?: XOR<MeetupsCreateWithoutMembersInput, MeetupsUncheckedCreateWithoutMembersInput>
    connectOrCreate?: MeetupsCreateOrConnectWithoutMembersInput
    connect?: MeetupsWhereUniqueInput
  }

  export type MeetupsUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<MeetupsCreateWithoutMembersInput, MeetupsUncheckedCreateWithoutMembersInput>
    connectOrCreate?: MeetupsCreateOrConnectWithoutMembersInput
    upsert?: MeetupsUpsertWithoutMembersInput
    connect?: MeetupsWhereUniqueInput
    update?: XOR<XOR<MeetupsUpdateToOneWithWhereWithoutMembersInput, MeetupsUpdateWithoutMembersInput>, MeetupsUncheckedUpdateWithoutMembersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type MeetupsToTagsCreateWithoutMeetupInput = {
    tag: TagsCreateNestedOneWithoutMeetupsInput
  }

  export type MeetupsToTagsUncheckedCreateWithoutMeetupInput = {
    id?: number
    tagId: number
  }

  export type MeetupsToTagsCreateOrConnectWithoutMeetupInput = {
    where: MeetupsToTagsWhereUniqueInput
    create: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupsToTagsCreateManyMeetupInputEnvelope = {
    data: MeetupsToTagsCreateManyMeetupInput | MeetupsToTagsCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type MembersCreateWithoutMeetupInput = {
    userId: number
  }

  export type MembersUncheckedCreateWithoutMeetupInput = {
    id?: number
    userId: number
  }

  export type MembersCreateOrConnectWithoutMeetupInput = {
    where: MembersWhereUniqueInput
    create: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput>
  }

  export type MembersCreateManyMeetupInputEnvelope = {
    data: MembersCreateManyMeetupInput | MembersCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type MeetupsToTagsUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupsToTagsWhereUniqueInput
    update: XOR<MeetupsToTagsUpdateWithoutMeetupInput, MeetupsToTagsUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupsToTagsCreateWithoutMeetupInput, MeetupsToTagsUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupsToTagsUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupsToTagsWhereUniqueInput
    data: XOR<MeetupsToTagsUpdateWithoutMeetupInput, MeetupsToTagsUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupsToTagsUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupsToTagsScalarWhereInput
    data: XOR<MeetupsToTagsUpdateManyMutationInput, MeetupsToTagsUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MeetupsToTagsScalarWhereInput = {
    AND?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
    OR?: MeetupsToTagsScalarWhereInput[]
    NOT?: MeetupsToTagsScalarWhereInput | MeetupsToTagsScalarWhereInput[]
    id?: IntFilter<"MeetupsToTags"> | number
    meetupId?: IntFilter<"MeetupsToTags"> | number
    tagId?: IntFilter<"MeetupsToTags"> | number
  }

  export type MembersUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MembersWhereUniqueInput
    update: XOR<MembersUpdateWithoutMeetupInput, MembersUncheckedUpdateWithoutMeetupInput>
    create: XOR<MembersCreateWithoutMeetupInput, MembersUncheckedCreateWithoutMeetupInput>
  }

  export type MembersUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MembersWhereUniqueInput
    data: XOR<MembersUpdateWithoutMeetupInput, MembersUncheckedUpdateWithoutMeetupInput>
  }

  export type MembersUpdateManyWithWhereWithoutMeetupInput = {
    where: MembersScalarWhereInput
    data: XOR<MembersUpdateManyMutationInput, MembersUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MembersScalarWhereInput = {
    AND?: MembersScalarWhereInput | MembersScalarWhereInput[]
    OR?: MembersScalarWhereInput[]
    NOT?: MembersScalarWhereInput | MembersScalarWhereInput[]
    id?: IntFilter<"Members"> | number
    meetupId?: IntFilter<"Members"> | number
    userId?: IntFilter<"Members"> | number
  }

  export type MeetupsToTagsCreateWithoutTagInput = {
    meetup: MeetupsCreateNestedOneWithoutTagsInput
  }

  export type MeetupsToTagsUncheckedCreateWithoutTagInput = {
    id?: number
    meetupId: number
  }

  export type MeetupsToTagsCreateOrConnectWithoutTagInput = {
    where: MeetupsToTagsWhereUniqueInput
    create: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput>
  }

  export type MeetupsToTagsCreateManyTagInputEnvelope = {
    data: MeetupsToTagsCreateManyTagInput | MeetupsToTagsCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type MeetupsToTagsUpsertWithWhereUniqueWithoutTagInput = {
    where: MeetupsToTagsWhereUniqueInput
    update: XOR<MeetupsToTagsUpdateWithoutTagInput, MeetupsToTagsUncheckedUpdateWithoutTagInput>
    create: XOR<MeetupsToTagsCreateWithoutTagInput, MeetupsToTagsUncheckedCreateWithoutTagInput>
  }

  export type MeetupsToTagsUpdateWithWhereUniqueWithoutTagInput = {
    where: MeetupsToTagsWhereUniqueInput
    data: XOR<MeetupsToTagsUpdateWithoutTagInput, MeetupsToTagsUncheckedUpdateWithoutTagInput>
  }

  export type MeetupsToTagsUpdateManyWithWhereWithoutTagInput = {
    where: MeetupsToTagsScalarWhereInput
    data: XOR<MeetupsToTagsUpdateManyMutationInput, MeetupsToTagsUncheckedUpdateManyWithoutTagInput>
  }

  export type MeetupsCreateWithoutTagsInput = {
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    members?: MembersCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsUncheckedCreateWithoutTagsInput = {
    id?: number
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    members?: MembersUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsCreateOrConnectWithoutTagsInput = {
    where: MeetupsWhereUniqueInput
    create: XOR<MeetupsCreateWithoutTagsInput, MeetupsUncheckedCreateWithoutTagsInput>
  }

  export type TagsCreateWithoutMeetupsInput = {
    title: string
  }

  export type TagsUncheckedCreateWithoutMeetupsInput = {
    id?: number
    title: string
  }

  export type TagsCreateOrConnectWithoutMeetupsInput = {
    where: TagsWhereUniqueInput
    create: XOR<TagsCreateWithoutMeetupsInput, TagsUncheckedCreateWithoutMeetupsInput>
  }

  export type MeetupsUpsertWithoutTagsInput = {
    update: XOR<MeetupsUpdateWithoutTagsInput, MeetupsUncheckedUpdateWithoutTagsInput>
    create: XOR<MeetupsCreateWithoutTagsInput, MeetupsUncheckedCreateWithoutTagsInput>
    where?: MeetupsWhereInput
  }

  export type MeetupsUpdateToOneWithWhereWithoutTagsInput = {
    where?: MeetupsWhereInput
    data: XOR<MeetupsUpdateWithoutTagsInput, MeetupsUncheckedUpdateWithoutTagsInput>
  }

  export type MeetupsUpdateWithoutTagsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    members?: MembersUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupsUncheckedUpdateWithoutTagsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    members?: MembersUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type TagsUpsertWithoutMeetupsInput = {
    update: XOR<TagsUpdateWithoutMeetupsInput, TagsUncheckedUpdateWithoutMeetupsInput>
    create: XOR<TagsCreateWithoutMeetupsInput, TagsUncheckedCreateWithoutMeetupsInput>
    where?: TagsWhereInput
  }

  export type TagsUpdateToOneWithWhereWithoutMeetupsInput = {
    where?: TagsWhereInput
    data: XOR<TagsUpdateWithoutMeetupsInput, TagsUncheckedUpdateWithoutMeetupsInput>
  }

  export type TagsUpdateWithoutMeetupsInput = {
    title?: StringFieldUpdateOperationsInput | string
  }

  export type TagsUncheckedUpdateWithoutMeetupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupsCreateWithoutMembersInput = {
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    tags?: MeetupsToTagsCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsUncheckedCreateWithoutMembersInput = {
    id?: number
    title: string
    description: string
    date: string
    place: string
    organizerId: number
    tags?: MeetupsToTagsUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupsCreateOrConnectWithoutMembersInput = {
    where: MeetupsWhereUniqueInput
    create: XOR<MeetupsCreateWithoutMembersInput, MeetupsUncheckedCreateWithoutMembersInput>
  }

  export type MeetupsUpsertWithoutMembersInput = {
    update: XOR<MeetupsUpdateWithoutMembersInput, MeetupsUncheckedUpdateWithoutMembersInput>
    create: XOR<MeetupsCreateWithoutMembersInput, MeetupsUncheckedCreateWithoutMembersInput>
    where?: MeetupsWhereInput
  }

  export type MeetupsUpdateToOneWithWhereWithoutMembersInput = {
    where?: MeetupsWhereInput
    data: XOR<MeetupsUpdateWithoutMembersInput, MeetupsUncheckedUpdateWithoutMembersInput>
  }

  export type MeetupsUpdateWithoutMembersInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    tags?: MeetupsToTagsUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupsUncheckedUpdateWithoutMembersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: StringFieldUpdateOperationsInput | string
    place?: StringFieldUpdateOperationsInput | string
    organizerId?: IntFieldUpdateOperationsInput | number
    tags?: MeetupsToTagsUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupsToTagsCreateManyMeetupInput = {
    id?: number
    tagId: number
  }

  export type MembersCreateManyMeetupInput = {
    id?: number
    userId: number
  }

  export type MeetupsToTagsUpdateWithoutMeetupInput = {
    tag?: TagsUpdateOneRequiredWithoutMeetupsNestedInput
  }

  export type MeetupsToTagsUncheckedUpdateWithoutMeetupInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type MeetupsToTagsUncheckedUpdateManyWithoutMeetupInput = {
    id?: IntFieldUpdateOperationsInput | number
    tagId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersUpdateWithoutMeetupInput = {
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersUncheckedUpdateWithoutMeetupInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MembersUncheckedUpdateManyWithoutMeetupInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MeetupsToTagsCreateManyTagInput = {
    id?: number
    meetupId: number
  }

  export type MeetupsToTagsUpdateWithoutTagInput = {
    meetup?: MeetupsUpdateOneRequiredWithoutTagsNestedInput
  }

  export type MeetupsToTagsUncheckedUpdateWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
  }

  export type MeetupsToTagsUncheckedUpdateManyWithoutTagInput = {
    id?: IntFieldUpdateOperationsInput | number
    meetupId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use MeetupsDefaultArgs instead
     */
    export type MeetupsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MeetupsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagsDefaultArgs instead
     */
    export type TagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = TagsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeetupsToTagsDefaultArgs instead
     */
    export type MeetupsToTagsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MeetupsToTagsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MembersDefaultArgs instead
     */
    export type MembersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = MembersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}